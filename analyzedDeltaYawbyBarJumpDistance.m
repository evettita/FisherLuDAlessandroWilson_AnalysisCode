%% analyzedDeltaYawbyBarJumpDistance
% Analysis code for plotting changes in Yaw ball position data obtained using barRandLocON stimulus
% displays both all trials from an expeirment in order as well as
% averaged tuning curves for the full expeirment
% 
% extracts the Yaw ball position data for when the bar jumps different
% amounts from presentation to presentation (ie -90, next bar 10)
% 
% Written to plot at motor correlate (yaw) depending on bar jump direction (bar yaw)
% barRandLocON stimulus for Figure 1 of the manuscript
%
% Yvette Fisher 11/26/18
%% 1) Load in open loop data set we want to work on for this fly
clear all
close all
ephysSettings;

% INPUT wanted trials here
possibleTrials = [1:12];

% pull out file names for the trials where the wanted stimulus was shown:
includeIfNameContainsString = false;
trialFilesList = extractTrialsWithCertainStimulusName( 'barRandLocON()', includeIfNameContainsString, possibleTrials );
% 
%% 2) Plot all selected trials to check how the raw traces look by eye
plotSelectedTrials( trialFilesList )


%% 3) Extract Yaw and angular velocity variablies/voltage for each bar flash position
ephysSettings;

for fileNum = 1 : length ( trialFilesList )
    
    cd( trialFilesList( fileNum ).folder );
    % load current file for current trial
    load( trialFilesList(fileNum).name );
        
    LOWPASS_FILTER_CUTOFF= 25; % Hz
    THRESHOLD_ANGULAR_VELOCITY = 2500; % degrees / s  this is the max velocity that can be allowed into analysis

    % decode angular velocity and accumulated position
    [ angularVelocity , accumulatedPosition ] = ficTracSignalDecoding( data.ficTracAngularPosition, settings.sampRate, LOWPASS_FILTER_CUTOFF, THRESHOLD_ANGULAR_VELOCITY);

    % save TrialTime
    processedData(fileNum).trialStartTime = trialMeta.trialStartTime;
    % same Trial number
    processedData(fileNum).trialNum = trialMeta.trialNum; 
    processedData(fileNum).exptInfo = exptInfo;
    processedData(fileNum).stimulus = stimulus;
    
    minXPos = 1;
    maxXPos = 71;
    DURATION_TO_PLOT_BEFORE_FLASH = 0.5;
    DURATION_TO_PLOT_PER_EPOCH = 1; % sec
    
    % set how long the stimulus step (data.xPanelPos) needs to be constant
    % after change to be included in data set
    SEARCH_LENGTH = 0.3; % seconds
    seqFramesToLookFor = SEARCH_LENGTH * settings.sampRate;
    
    INTERVAL_TO_LOOK_BEHIND = 0.75; % seconds
    numFrameToCheckBehind = INTERVAL_TO_LOOK_BEHIND * settings.sampRate;
    
    FINAL_STIMULUS_PERIOD =  4; %seconds
    numOfFramesToIgnoreAtEnd = FINAL_STIMULUS_PERIOD * settings.sampRate;
    
    START_STIMULUS_PERIOD =  4; %seconds
    numOfFramesToIgnoreAtStart = START_STIMULUS_PERIOD * settings.sampRate;
    
    degreeBarMoved = [];
    
    for j = ( minXPos : maxXPos)  % loop over all possible X-pos values and pull out traces for each that has data
        % find index where the pos value has changed
        change = find( diff (data.xPanelPos) ~= 0 ) + 1;
        
        % find which of those indexes the panels was at the currect position j
        indofJ = change (data.xPanelPos (change)  == j) ;
        
        % remove any indexs too close to the end of the trace to cause errors
        indofJ  = indofJ (indofJ < ( numel( data.xPanelPos )  - numOfFramesToIgnoreAtEnd));
        
        % remove any indexes to close to start of the trace that might
        % cause errors
        indofJ  = indofJ (indofJ >  numOfFramesToIgnoreAtStart) ;
        
        epochStartInds = [];
        
        % only take those where there are not change in position values for 300 ms after the start
        for ii = 1: length( indofJ )
            averagePosDecode = mean ( data.xPanelPos (indofJ(ii) + 1 : indofJ(ii) + seqFramesToLookFor ) );
            
            if(averagePosDecode == j) % if not other changes then take this index
                epochStartInds = [epochStartInds indofJ(ii) ];
            end
        end
        % check that this epoch step was not empty for some reason
        if( ~ isempty(epochStartInds) )
            
            stimulusStep= [];
            currentVoltageByPosition = [];
            currentBallPositionByBarPosition = [];
            currentBallVelocityByBarPosition = [];
            currBarPosition = [];
            lastBarPosition = [];
            numOfBarPositionJumped = [];
            degreeBarJumped = [];
            
            for i = 1 : ( numel(epochStartInds) )
                
                currEpochStart = epochStartInds(i) - (DURATION_TO_PLOT_BEFORE_FLASH * settings.sampRate);
                currEpochEnd = epochStartInds(i) + ( DURATION_TO_PLOT_PER_EPOCH * settings.sampRate);
                
                % store voltage and ball position and ball velocity trace
                currentVoltageByPosition(i, :) = data.scaledVoltage( currEpochStart : currEpochEnd);
                currentBallPositionByBarPosition(i, :) = accumulatedPosition( currEpochStart : currEpochEnd);
                currentBallVelocityByBarPosition(i , :) = angularVelocity( currEpochStart : currEpochEnd);
                
                % same stimulus step
                stimulusStep(i, :)  = data.xPanelPos( currEpochStart: currEpochEnd );
                
                % solve for how far the bar jumped to get to this current location
                DEGREE_PER_LED_SLOT = 360 / 96;  %
                
                currBarPosition = data.xPanelPos( epochStartInds(i) );
                lastBarPosition = data.xPanelPos( epochStartInds(i) -  numFrameToCheckBehind );
                
                numOfBarPositionJumped(i) =  currBarPosition - lastBarPosition;% last - current
                
                % turn jump into degree
                degreeJumped = numOfBarPositionJumped(i) * DEGREE_PER_LED_SLOT;
                % if larger jump than 180 wrap other direction
                if( abs(degreeJumped) >180 && degreeJumped > 0 )
                    degreeJumped = degreeJumped - 360;
                    
                elseif( abs(degreeJumped) >180 && degreeJumped < 0 )
                    degreeJumped = degreeJumped + 360;
                end
                
                % save degree jumped value
                degreeBarJumped(i) = degreeJumped;
                
            end
             % save the data traces for this bar position:
            voltageByPosition{j} = currentVoltageByPosition;
            ballPositionByBarPosition{j} = currentBallPositionByBarPosition; 
            ballVelocityByBarPosition{j} = currentBallVelocityByBarPosition;
            stimulusStepByPosition{j} = stimulusStep;
            % 
            barPositionJumped(j,1:length(numOfBarPositionJumped) ) = numOfBarPositionJumped;
            degreeBarMoved(j, 1:length(degreeBarJumped) ) = degreeBarJumped;
        end
             
    end
    % same traces & stimulus steps for all bar positions
    processedData(fileNum).voltageByPosition =   voltageByPosition;
    processedData(fileNum).ballPositionByBarPosition =   ballPositionByBarPosition; % Yaw
    processedData(fileNum).ballVelocityByBarPosition =   ballVelocityByBarPosition; % YAW
    processedData(fileNum).stimulusStep = stimulusStepByPosition;
    processedData(fileNum).numBarPositionJumped =  barPositionJumped;
    processedData(fileNum).degreeBarJumped =  degreeBarMoved;
end

%% loop over all the posible jump distances

jumpDistancesToPlot = -180:20:180; % possible jump distances for open loop data set

deltaYawPositionByBarJump = cell(1);

meanDeltaYaw = [];

% loop over jumpDistancesToPlot regions
for j = 1: (length( jumpDistancesToPlot) - 1)
    
    counter= 1;
    % loop over all trails in this data set
    for i = 1 : length( processedData )
        
        % find degreeBarJump between jumpDistancesToPlot(i) and
        % jumpDistancesToPlot(i+1) inclusize . but **excluding zero**
        [xind,yind] = find( (jumpDistancesToPlot(j) <= processedData(i).degreeBarJumped) & ...
            (processedData(i).degreeBarJumped <= jumpDistancesToPlot(j + 1)) &...
            (processedData(i).degreeBarJumped ~= 0) );
              
        %loop over all responses periods in this block
        for k = 1: length(xind) 
        
        % pull out the yaw ball positive for those time points
        % extract ball yaw trace
        currTraces = processedData(i).ballPositionByBarPosition{xind(k)}(yind(k),:);
        currTimeArray = (1  :  length(currTraces) ) / settings.sampRate; % seconds
        
        % Extract average from each epoch period
        PRE_BASELINE_START_TIME = 0.25;
        PRE_BASELINE_END_TIME = 0.5;        
        RESP_START_TIME = 0.75;
        RESP_END_TIME = 1;

        preBaselinesIndexes = PRE_BASELINE_START_TIME < currTimeArray & currTimeArray < PRE_BASELINE_END_TIME ;
        responsePeriodIndexes = RESP_START_TIME < currTimeArray & currTimeArray < RESP_END_TIME ;
        
         % save pre baseline mean
        preBaselineYaw =  currTraces (:, preBaselinesIndexes);
        ave_preBaselineYaw = mean ( preBaselineYaw );

        % save responses in section
        yawPositionResp = currTraces (:, responsePeriodIndexes);
        ave_yawPositionResp = mean ( yawPositionResp );
        
        deltaYawPositionByBarJump{j}( counter) = ave_yawPositionResp - ave_preBaselineYaw;
        counter = counter + 1;
        end  
    end
    meanDeltaYaw( j) = mean( deltaYawPositionByBarJump{j});
end

% plot the results
figure; set(gcf, 'Color', 'w');

middleOfsectionJumpDistance = jumpDistancesToPlot(1:end-1) + (jumpDistancesToPlot(2) - jumpDistancesToPlot(1))/2;

plot( middleOfsectionJumpDistance, meanDeltaYaw ); 
xlabel( 'bar movement distance ( deg)');
ylabel(' delta yaw of ball');
box off; niceaxes


%% calculate the pvalues vs a bootstrap for this single fly:
%
% sample with replacement each flies trials using the number of trial
% used in the mean for that fly. 
%
%  1) Start with matrix trial# x18 (bar location responses)
%  2) sample randomly (with replacement) the number of trial used for this
%  fly
%  3) Take average of those values and save that number
%  4) Repeat 10000000 times
%  5) Find 95% CI for that distribution
%  6) Ask do any of the flies resposnes fall outside of that 95% confidence
%  internal
%
trialNum= length( trialFilesList );
NUM_REPEATS = 10000000;

deltaYawPosition;

flyAve = [];

for i = 1: NUM_REPEATS   
    randInd =  randi( numel( deltaYawPosition) , 1, trialNum );

    flyAve(i) = mean( deltaYawPosition( randInd ) );
end

%% Obtain the pvalue on each data points from deltaYawPosition relative to the bootstrap distibution
close all;
for j = 1: length( meanDeltaYawPosition )

pvalue(j) = twoSidePvalueFromDistribution( flyAve , meanDeltaYawPosition(j) );

[~, pValueFromTTEST(j)] = ttest2(flyAve , meanDeltaYawPosition(j));

end

%% plot the summary for the whole data set across all flies
jumpDistancesLookAt = -180:20:180;
jumpDistancesForPlotting = jumpDistancesLookAt(1:end-1) + 10;

% currently n=7 flies here. add more!
allDeltaYawResponsesToBarJumps = [-0.605273891000000,-0.461170829000000,-2.22140613300000,-1.91510087200000,-0.260798179000000,0.750393680000000,-0.783508007000000,0.537653835000000,-2.35413542700000,1.31796606300000,1.29000548300000,-2.87370451500000,-2.07913622000000,-0.0215546380000000,0.898471247000000,0.0982015370000000,0.00462037400000000,-0.0428940640000000;-5.15296059200000,-1.91733275600000,-2.79938700600000,-5.50401349800000,-4.53787986600000,-0.973341832000000,0.947362821000000,-3.85213093900000,-0.866563842000000,-6.70346579200000,-8.83127849300000,-2.37366693200000,-1.76335283100000,2.54365368200000,-1.60620885100000,-2.25359563600000,-0.731624473000000,-2.52407531100000;-0.101293505000000,-3.57462586700000,1.46600570900000,-6.58901983800000,-3.05197641700000,-1.86656462200000,-2.18293749700000,-3.12712945700000,-0.988810607000000,-1.14370519100000,0.100565887000000,-2.39805149100000,-3.96372416900000,-3.50436234900000,-0.890971778000000,5.60846721600000,3.07623080300000,-0.535476334000000;0.121312686000000,0.109557455000000,0.0976986660000000,0.502589563000000,0.239476547000000,0.105308905000000,0.0944932360000000,-0.0397670720000000,0.0239187550000000,-0.0230638670000000,0.482701638000000,0.135707505000000,0.0519077130000000,0.124233780000000,0.0221183600000000,0.0984783050000000,0.0827902870000000,-0.00458837900000000;-0.169726243000000,0.0428990320000000,-0.116084768000000,0.377878799000000,-0.692708719000000,0.0859064790000000,0.238494449000000,-1.08076243700000,-1.74545982900000,0.0870704410000000,-1.00286624400000,-0.0466453760000000,0.0973843840000000,-0.183811989000000,-0.311878199000000,-1.41101687100000,2.05459840500000,-2.19270821300000;0.169965078000000,-0.253120906000000,-1.28140800700000,0.920780977000000,1.05950221800000,-0.0118651000000000,-0.493510737000000,0.795705560000000,-3.62172783600000,-0.0106661990000000,0.680710161000000,-0.286834192000000,1.89684569200000,0.244234977000000,-0.481429944000000,0.498268913000000,0.0746516650000000,0.275686112000000;-0.0180221490000000,-0.0542161400000000,-0.0295221050000000,0.00188157600000000,0.0364883970000000,-0.00248654700000000,0.00839567700000000,0.00713003600000000,-0.0285231500000000,0.0259606770000000,0.0130166960000000,0.00144580100000000,0.0320867270000000,-0.00741651000000000,0.0294323240000000,0.0311061060000000,-0.00757841200000000,0.0354316780000000;0.0289145500000000,0.0184927500000000,0.211298091000000,-0.459051489000000,0.0112468550000000,-0.0957040640000000,-0.139731266000000,0.844126244000000,-0.130783057000000,-0.0143502450000000,0.976503134000000,1.33542486500000,-1.15032735600000,2.10529738400000,-1.11007277900000,0.147641115000000,-0.0107476200000000,-0.00290484000000000;0.933458563000000,-0.0544796180000000,6.99954357800000,3.38078468500000,2.79821960800000,0.472604410000000,1.13466163600000,-0.110380080000000,0.0752855440000000,-0.687097797000000,0.531331360000000,1.82605302400000,-0.609663265000000,1.25318531900000,1.55807807900000,-0.0787423110000000,0.143391473000000,-1.01627473000000;21.4787110600000,-0.0659857730000000,-0.840952568000000,2.81726991800000,2.61488632500000,2.73286870500000,5.26802217700000,-2.36348559400000,0.0209407790000000,-0.181589975000000,1.76775201500000,-0.0496324000000000,-2.25337673900000,-3.32029343900000,8.23389380800000,3.63858851300000,7.54364792200000,-0.678987761000000;-3.33677761400000,6.18983693000000,-0.483015987000000,3.47397918200000,2.54267829300000,1.13270171100000,0.595760591000000,2.98949505200000,4.89620626100000,0.0411980960000000,5.16628084400000,0.0797422200000000,-1.61071671300000,-2.13452177500000,1.23715693700000,-0.904376760000000,0.863197037000000,0.0470937050000000;-0.0742117780000000,0.251795162000000,1.71681207900000,1.27154334500000,-0.0530104460000000,0.307351394000000,1.19990971200000,0.100627493000000,-0.0522098120000000,1.04050718500000,0.576228608000000,1.05055978200000,0.0198447470000000,1.25160111900000,0.0284826080000000,-0.0193568930000000,0.583477626000000,0.935024925000000;-5.39195325500000,7.84443329000000,-2.83848171600000,3.10853535500000,3.40159143000000,4.50844325200000,1.47491645700000,-1.40138765100000,3.66711792200000,0.306576177000000,2.13114547000000,-0.274291370000000,2.54124045200000,1.17417420700000,1.20885736200000,-0.806190644000000,8.99814150000000,7.39453611100000;0.507295123000000,0.703002359000000,-0.183445126000000,0.165698685000000,0.515928877000000,1.23527009200000,0.459873730000000,0.873209771000000,-0.864120350000000,0.739888930000000,0.0258277380000000,1.49509827600000,0.0121385800000000,1.11552584000000,0.212985130000000,-0.954247984000000,-0.0707031590000000,0.886724118000000;-9.55225692800000,-11.3708502400000,-0.267980147000000,-5.20971207400000,-1.78654659100000,-6.12779012600000,-3.44663870900000,-3.72432680000000,-5.28580782600000,3.34032045600000,-1.33301190800000,-0.346075602000000,-2.61190837300000,1.66073980900000,1.38093107100000,-7.17523321300000,4.62722176100000,-0.0647555680000000;-0.525818715000000,-0.0916663990000000,0.0579594950000000,0.670007731000000,0.157448136000000,1.55885081900000,-0.145722769000000,1.06291880900000,-0.330246702000000,-0.129990754000000,-0.0145940360000000,-0.113711670000000,-2.23468511800000,0.490239613000000,1.27057994400000,0.0291114230000000,0.593919968000000,0.598148945000000;-5.89417327400000,-4.89606397900000,-5.30882696000000,-2.14602639200000,-0.137677800000000,-2.14556861800000,-1.72699115900000,-3.98883484300000,-4.49957300700000,-0.186648581000000,-3.45352224200000,-5.20346718700000,-1.80493675200000,-5.22307866300000,-8.48883629900000,0.0464616400000000,-3.10553218000000,0.0532765610000000;-0.269408208000000,-0.303141186000000,-0.178391936000000,-0.283173674000000,0.729838548000000,1.61304064100000,0.721799442000000,0.313910202000000,-0.383024616000000,-0.162364079000000,-0.147469959000000,0.272776354000000,-0.296227681000000,-0.152363199000000,0.576257579000000,0.695810951000000,-0.605055091000000,-0.00853805300000000;-1.82043894300000,-0.518024953000000,0.436538813000000,0.952134382000000,-0.650475773000000,-0.744327699000000,0.205188483000000,2.30306429900000,0.394290943000000,-1.02278694200000,0.445226054000000,-0.143066262000000,0.375136807000000,0.0112386150000000,0.377865411000000,-1.63960243700000,-1.33397104500000,-0.0484828760000000;1.35768458100000,-0.878831409000000,1.32788885800000,-0.0943758250000000,-0.709418844000000,0.957409449000000,0.937735510000000,-1.01790680900000,0.518538681000000,0.179912552000000,0.737200458000000,1.95561598000000,-0.757616619000000,-0.191289889000000,0.796496741000000,0.304758651000000,1.20164686100000,-0.000119958000000000;-0.0651848990000000,0.109308447000000,-0.0293495650000000,-0.0149398840000000,-0.0609127140000000,-0.00432689100000000,0.0416894800000000,-0.144916522000000,0.0554707050000000,-0.329099538000000,-0.275051654000000,0.538634524000000,-0.0690998520000000,-0.0824781990000000,0.0123792320000000,-0.0974836000000000,-0.322240324000000,-0.0354195000000000;2.41507954900000,-2.13620476700000,-4.36822075400000,-7.32605196000000,-4.33713454900000,-3.06507139100000,-6.06613413600000,-0.190836190000000,0.201466923000000,1.87479057700000,3.83684090600000,-2.70050610900000,2.28194757000000,-7.36417619000000,-0.537166053000000,-0.121952117000000,-3.10940695200000,-2.18845891300000;0.113778620000000,-0.294662326000000,-0.0420482990000000,-0.710808103000000,0.971793783000000,0.685531958000000,-1.46188640200000,-2.31844662300000,3.32428601500000,-0.155739578000000,-2.30127937900000,0.769275299000000,-0.341578236000000,0.317867861000000,-0.268101562000000,0.0606977880000000,-0.794089895000000,-0.0393655060000000;1.21424162800000,-0.246949794000000,1.50658803800000,0.734973965000000,1.27460188200000,-0.265223156000000,-0.246337139000000,-0.389263146000000,0.987799697000000,1.44115670500000,0.999210216000000,0.969760148000000,-0.00375826600000000,-0.353305078000000,0.000441835000000000,0.125575281000000,-0.717723031000000,-0.171778094000000;1.26987154900000,-5.39846933500000,2.51674565500000,1.84674101600000,4.14094246000000,0.575652787000000,0.692454565000000,0.825940254000000,1.35190246400000,2.51583783100000,-0.581880858000000,-1.23294514400000,-2.03737617000000,-1.73854621800000,-2.21651985100000,1.90371278800000,1.28612054400000,-1.05653924600000;0.000527107000000000,-0.664498906000000,-1.85866025600000,-0.186585465000000,-0.0434261580000000,-2.43129613500000,-2.21117635600000,0.0351468360000000,-0.167284308000000,0.0428710750000000,-0.109054008000000,-0.0779920160000000,-0.0791591590000000,0.0456562350000000,-0.125066392000000,-0.178438743000000,-1.05655327400000,-0.790903693000000;-0.00583661300000000,-0.690606449000000,-0.237520551000000,0.171681600000000,0.289136734000000,0.168354079000000,0.0553283010000000,1.65540663600000,-0.145114274000000,0.110822237000000,0.0673946350000000,-0.155094595000000,0.0196805830000000,0.104637409000000,0.278745311000000,0.127094350000000,0.0637469210000000,-0.575363213000000;-0.00322657600000000,-0.0491062690000000,-0.0326720850000000,-0.0222645520000000,0.00482529700000000,0.0236497410000000,0.0516151430000000,0.0183425890000000,0.0279902250000000,-0.0278957470000000,0.0846729070000000,0.0280118790000000,-0.0145501780000000,-0.0489745550000000,0.0572879440000000,-0.0133366980000000,-0.0382507910000000,-0.0455224330000000;-0.321946605000000,-0.140160736000000,-0.162270378000000,-0.194441201000000,-0.878808255000000,-0.267328578000000,0.0578428630000000,0.669336435000000,0.0519603450000000,-0.366457203000000,-0.501543932000000,0.279957542000000,0.000583304000000000,-0.958887269000000,0.0986420070000000,0.205678237000000,-0.722008340000000,-0.0248929150000000;-0.0233374730000000,-0.505679604000000,0.501801910000000,0.571793774000000,-0.108948022000000,-0.459232996000000,-0.0812202980000000,1.48326007500000,0.326831351000000,0.170249968000000,0.0536707460000000,0.0864350780000000,-0.0938355280000000,-0.0140860460000000,0.812384973000000,-0.287750403000000,-0.144551898000000,-0.538605562000000;-11.4302295400000,-5.84778386800000,-1.46755916200000,-7.94183650000000,-10.1536890100000,-6.17989308900000,-2.01539130300000,-7.79318671000000,-3.19558909900000,-1.07659746800000,-2.73216845700000,-5.85306379700000,-3.04729750100000,-2.81682069300000,-6.88697609100000,-9.76970862500000,-4.72447155100000,0.829128841000000;-2.27922175500000,-2.25360993900000,-6.19698981400000,-3.10598406900000,-5.48734044600000,-0.518426891000000,-1.96172395000000,-10.3142534500000,-3.64429095900000,-3.87696489300000,-6.51845577700000,-7.87614280900000,-4.91256807900000,-3.46573023500000,-0.630036050000000,-0.902715615000000,-3.94774141900000,0.729992259000000;0.804252327000000,-0.270284440000000,1.70810010100000,1.76194441400000,-0.344267147000000,2.62249339600000,1.82588124600000,-0.700190771000000,-1.57317222500000,1.84267089600000,0.0710577960000000,0.574569452000000,-0.0955412670000000,3.94763417000000,1.35299949000000,3.26012094700000,3.73855257600000,1.19770774900000;-0.144833476000000,-0.174590117000000,-0.490380883000000,-0.351920610000000,-0.0881142690000000,-0.197485162000000,-0.0666964100000000,-1.17879973500000,-0.150905131000000,-1.95382415100000,-1.30747885500000,-0.556451385000000,-0.00930169700000000,-0.000386172000000000,0.260867240000000,0.0782742270000000,-0.126652768000000,-2.47762345000000;-0.108140657000000,-0.187566692000000,-0.952882571000000,-0.533008820000000,0.0641230340000000,-0.166004065000000,-0.0337757300000000,-0.0557106860000000,-0.0309229060000000,-0.245063936000000,-1.94827956300000,0.153492485000000,0.146818330000000,0.0384377930000000,0.00850792900000000,-0.0469251040000000,-0.0944716300000000,-0.0541524800000000;-0.00785557700000000,0.294481694000000,-2.82662795200000,-3.34011133000000,1.71645828400000,-3.92379309400000,-0.797687748000000,-2.76633216700000,-3.46166236600000,-0.128515403000000,-1.81816981300000,-3.34899388100000,-1.42506905900000,-1.09863126400000,-0.687605023000000,1.59563234400000,-0.425572827000000,-5.43960640200000;-0.103370111000000,0.142298136000000,-0.0256454310000000,0.0120488590000000,0.138020606000000,0.0586378850000000,0.230770456000000,-0.0556959160000000,0.0650115870000000,0.123026200000000,-0.162432232000000,-0.108812546000000,-0.149176058000000,-0.0405869000000000,-0.0630393930000000,-0.105479572000000,-0.0845867920000000,0.0570812270000000;0.0833491410000000,0.0864952960000000,-0.0351930540000000,0.0693196010000000,-0.0813347110000000,-0.175818778000000,-0.198439185000000,-0.0393901560000000,-0.0782875840000000,-0.0236745700000000,-0.0534921980000000,-0.118212497000000,-0.0238975970000000,0.104721654000000,-0.0910360350000000,0.0420858160000000,-0.0110597490000000,0.359460516000000;7.53692973300000,6.67952000200000,-2.76851079400000,-2.22317188600000,0.754565913000000,6.86446867600000,2.67577710300000,5.82925689100000,-0.315323847000000,0.0979417660000000,5.10500495900000,2.37991049500000,-2.80458035500000,-0.123027378000000,2.02518853000000,12.4432991800000,4.24337985200000,3.96760706100000;-27.0563185600000,-28.0926111400000,-5.19472732300000,-7.48938219800000,4.62814724400000,-14.2780233300000,-12.6100584800000,-4.88964884200000,-14.3037236400000,-16.5465590700000,-33.6029989800000,-20.8249660500000,-18.9291860000000,-27.9493843500000,-23.2264257600000,-7.99691937400000,-19.6307116300000,-16.0246443100000;4.53424819600000,2.38194634800000,3.40999570300000,3.26783634000000,1.63701292700000,2.60429452100000,2.70316670800000,2.41287088400000,1.30077181200000,4.83636315000000,3.57292452500000,2.54786534200000,2.75049279400000,0.473101971000000,2.62846604200000,5.19978051400000,2.28056865200000,5.41114229200000;0.0113135220000000,-0.0690630530000000,-0.0970584420000000,-0.0103939720000000,-5.67000000000000e-05,-0.0154803980000000,-0.0216710170000000,0.0581685520000000,0.0741526160000000,-0.0298165370000000,0.0130681710000000,0.0172250040000000,0.0324986290000000,-0.0677284250000000,0.0681814600000000,0.0572493500000000,0.0384309450000000,-0.0213877970000000;-4.02705316300000,-4.21918578700000,0.650108446000000,-9.16030897100000,-4.66587787800000,-5.05142790700000,-5.36696492000000,-10.0250183900000,0.891498975000000,-13.9163068300000,-10.1902043100000,3.20575778200000,-0.503562571000000,-5.47123879100000,-2.68327818200000,-10.5778273200000,-0.775313819000000,-2.51738380700000;-0.903673162000000,2.07340389200000,-2.85179961000000,-2.05442683900000,-2.08602706500000,1.32880355600000,-2.40662225800000,-2.29698812000000,-3.73402898300000,-2.98718858400000,-0.898339036000000,1.43430721900000,-0.843342790000000,-3.38501230800000,-1.57448683200000,1.38340524800000,-1.19878801500000,-1.91322896000000;-2.23312741100000,-0.584150563000000,-1.14177005100000,0.408214856000000,-3.48016974100000,-3.75333693400000,-6.42326687800000,-2.73433134000000,-6.05976146800000,-0.994570117000000,-5.70838439800000,-2.56690833300000,-2.90784894700000,-2.86119130500000,-12.1351667500000,-3.44258617600000,-0.982712356000000,-8.81257523200000;2.05683144300000,-0.139303704000000,-0.671539419000000,0.847243932000000,2.62968653100000,1.34624688400000,-0.276248060000000,-0.798773530000000,4.36503088300000,-2.84889043600000,-0.813165088000000,1.17960547400000,5.12993257000000,1.40920969500000,3.42998728200000,5.38111294700000,2.17368025700000,-5.03235327700000;0.0651634350000000,-0.0909038220000000,-0.143855505000000,-0.117811965000000,-0.0513384150000000,0.0437300370000000,0.0625807730000000,0.0846671360000000,0.0906452470000000,-0.0680486180000000,0.0121827160000000,-1.11473777700000,-1.76983036300000,-0.00873809800000000,-0.0414552960000000,-0.187300778000000,-0.207068449000000,-0.265318350000000;-5.42563086600000,11.1516455500000,0.237802580000000,-0.178484670000000,-5.84623988700000,-2.41873353700000,-1.06302832600000,-5.62516514300000,4.66646768500000,0.474033341000000,-6.54023662200000,0.608080706000000,1.74466327200000,-2.43711797200000,-4.74908533300000,2.40348381800000,-0.113178323000000,-0.705462391000000;-0.186811019000000,-10.2969419300000,1.43817741200000,-0.129609129000000,0.776344508000000,0.865139463000000,0.781179797000000,0.386957328000000,0.183124338000000,0.491073254000000,-0.418090153000000,-3.53637718800000,-4.88372249700000,3.53837397100000,0.839935303000000,2.28307944500000,-0.0312736550000000,4.93634850100000;6.48259518600000,-8.16920747300000,-2.24012159300000,0.275978562000000,-6.93482315900000,-8.19981305700000,-11.8703974000000,-7.76401742400000,-7.99692214100000,-1.36175933400000,-2.25778233800000,-10.6780249600000,-2.52977281800000,-11.7548929500000,-4.78401486200000,-2.68216531100000,-8.69924484500000,-1.17191791700000;-5.17543084100000,-6.38243717700000,4.66191608000000,2.11948924000000,-9.74308846300000,-3.40579952500000,-2.87711021900000,-3.81146600400000,-1.31338297100000,0.0127482360000000,-7.74401411600000,-6.86529355600000,-12.5070794600000,-0.891684447000000,-1.31956314300000,14.5760506700000,-11.0356606100000,0.309159352000000;-1.47993493300000,2.76993879600000,-8.69027512200000,-1.90108231000000,-1.17802629600000,-14.3254336600000,-5.85119223600000,2.75002227600000,-6.23829599100000,5.32882737000000,-0.157943142000000,-2.87108056000000,-7.14461636900000,-0.350518761000000,-6.32961354000000,-4.24754992800000,-0.700523807000000,0.118175945000000;-0.939344318000000,-1.36462311800000,-4.40340916600000,-5.65650822900000,-5.96231848500000,6.19022532200000,1.17954728000000,-3.33034522800000,1.30580012200000,-5.62824877700000,-6.31466163800000,-1.21829360000000,-2.44832092200000,0.0573268290000000,1.11769401900000,0.344298403000000,-0.463324463000000,-20.6997977300000;-0.454392590000000,-11.2021642300000,-0.908591745000000,-2.72851061800000,-0.0354474580000000,-1.53998957200000,-1.73899432300000,0.666064931000000,-0.846430221000000,-2.86782228000000,-1.80323702700000,-1.42200384800000,-0.256209689000000,-0.649504408000000,-3.73357268600000,-1.15843491500000,-0.791927608000000,-4.54691733700000;6.05335597100000,-6.88958419800000,4.75336410500000,9.19107144000000,2.61689448400000,17.1086823600000,9.62942289200000,5.35445039400000,18.2474188800000,10.1660432800000,10.6384344600000,4.61067287600000,0.968278313000000,3.39552627400000,11.8510677800000,4.92990458700000,11.7123913800000,0.953617821000000;0.378663450000000,-0.149648345000000,2.68555188600000,2.57860299300000,2.17525945700000,-0.698827677000000,1.26125443000000,-0.644780205000000,2.90969453500000,3.11360881300000,2.33923527300000,-0.630703495000000,1.28411660400000,9.41308513800000,0.957047400000000,3.28911099100000,8.69489544500000,6.55671686900000;-3.16012881000000,-9.38780413100000,-5.13358469500000,-6.70616183900000,0.720000023000000,-5.78079600500000,-4.14517619400000,-5.30136821800000,-6.30312134500000,-5.21543491200000,-2.08186374700000,0.636607617000000,1.54535844000000,-5.64558143200000,-4.85855848700000,-2.49349307200000,-8.43321368400000,-3.72826696000000;-1.47134574500000,0.0413536150000000,-1.13495480200000,-0.0236226940000000,0.0596231960000000,-1.31288727800000,-1.10816959700000,-3.80691757600000,-0.00393735700000000,-5.87527600500000,-4.72442481900000,-4.80838410900000,-0.0454188970000000,0.0508768040000000,-0.00699695700000000,-1.71855642100000,-2.85756546500000,-0.0417899990000000;1.67508213000000,2.50923463000000,-0.357386504000000,-2.04196590300000,-0.560604108000000,0.156770333000000,-0.102058920000000,-0.374256255000000,-0.203091360000000,0.850293448000000,-0.542223954000000,0.0243087450000000,1.22292039800000,0.173814874000000,-0.0894685370000000,1.17457510800000,0.651536790000000,-1.27039098400000;-1.01774122600000,-0.245722666000000,-2.59864905000000,-0.560345626000000,0.991211587000000,1.32442004600000,1.13814376500000,4.65545334500000,0.0122621330000000,-0.0661823600000000,2.59366287100000,0.550185744000000,3.18187412900000,0.967838555000000,4.12551654800000,-2.04583919400000,-2.47158726500000,-5.07881770200000;-6.91885192500000,-0.681123085000000,-3.69894574800000,-4.01616523600000,-3.15309389800000,-3.99142441000000,-4.78310492200000,-6.64792418000000,-10.8518449000000,-1.40375148200000,-4.65856341600000,-1.96824281600000,-1.01924832800000,-0.650950702000000,-3.25177018100000,-0.198923828000000,-8.92044008200000,-1.13980078800000;2.05577780400000,0.222478529000000,1.67672364200000,-0.460728550000000,6.88236748100000,3.12307409800000,2.97775264500000,-1.60826777500000,4.29970160100000,1.81196366000000,-1.46181567100000,1.94954686900000,0.388155833000000,4.37538247400000,5.02286862000000,4.62564822400000,1.49775468400000,11.5268536600000;21.8260607100000,6.11838195300000,1.78005227200000,13.0234560300000,16.3523970100000,8.40825821100000,-2.05194110500000,6.88315356400000,8.26115879900000,20.3360243700000,4.14238025400000,8.20407696200000,8.43018026500000,9.21408860700000,9.96102473600000,9.72162814000000,26.9597075800000,5.62995875800000;-3.85794620000000,-6.58052757300000,-0.930738465000000,-0.970663509000000,-12.3303288000000,0.157303260000000,-1.11550960100000,-4.66102982300000,-9.02440066400000,-5.97291750800000,0.0186112810000000,-4.43188916200000,-1.85011195500000,-1.20295356200000,-3.51830333600000,-6.77053034200000,-6.63248373900000,-1.31728976400000;-5.23596073200000,3.32153977300000,-0.435166990000000,2.82541050900000,-21.3412789300000,-15.4157737700000,-20.0638632300000,-9.53013161800000,-6.71814472200000,-12.1734806000000,-13.3476136000000,-7.05473630200000,-13.4893167700000,-10.0834708100000,-2.21726559200000,-18.1422732400000,-1.46609097700000,-22.5027313800000;0.420084391000000,0.00754815500000000,-0.854474870000000,-0.635567765000000,-0.0202485330000000,3.01795483000000,2.90713958600000,-0.529619075000000,2.38502703700000,0.572827558000000,1.25327090000000,0.130385250000000,0.106244625000000,-0.0167148850000000,-0.148796543000000,-0.933247162000000,0.966956898000000,-0.0469074010000000;-0.707948040000000,-0.257711545000000,-0.705034631000000,0.908224332000000,-4.16439353700000,-1.18824552600000,-1.65228174500000,-3.11802551200000,-0.789329322000000,-0.575735955000000,-1.19976640100000,-1.47809363300000,-0.322135661000000,-1.40945918000000,-1.44813032400000,-0.272469548000000,0.735822905000000,7.76486292400000;16.5587932900000,-3.94836748800000,-0.627638287000000,3.71293113700000,-0.537498594000000,6.38766881000000,2.92201473000000,3.54937708800000,-4.51982274800000,-0.0799054370000000,0.422731527000000,8.14904620100000,6.48774023400000,-3.05719798100000,-3.27860809800000,6.56599297000000,9.72095110100000,3.86367675400000;-1.03001398200000,-1.17847615500000,2.03586446200000,-0.252797206000000,0.242113125000000,-1.25707186900000,-4.14687100500000,0.392144184000000,0.179399309000000,-2.04199407000000,-0.311998464000000,0.279408307000000,-1.52316515400000,4.57587243300000,0.247783926000000,-2.70896101100000,2.83388095200000,-0.422747946000000;-1.49590987900000,-6.10210845200000,-3.39450427600000,3.72487152900000,-1.02727301600000,-7.34878117800000,-8.36999908300000,-19.1101426700000,-7.82618875600000,-1.91491528400000,4.80704472900000,-5.78640911000000,-5.69772149300000,-4.00621828400000,-6.19772890700000,8.03621592200000,0.977115466000000,1.99588738500000;-12.4353737900000,0.874126114000000,-8.83436383000000,-3.92033761200000,-2.44280894900000,4.38507324300000,1.14166264200000,0.608758821000000,1.08987298200000,-8.38503379700000,-12.5550999900000,-2.99236891200000,-3.88691147700000,-0.0419714040000000,-4.78922032900000,-16.9118576300000,-19.3480083400000,1.04420998500000;5.21198399500000,-13.3727014700000,-14.8129945200000,-4.10173195500000,1.41908357800000,-1.41408994900000,-8.89598168300000,-2.21884960900000,-13.6956482300000,-6.18188683600000,2.26050369700000,7.54574030400000,9.38251292400000,3.77242750800000,-1.66330906000000,-0.0126891600000000,2.56447348600000,-12.7506499700000;-1.49246979800000,-12.3430199000000,-1.05257029400000,-5.79540333000000,-10.5287992900000,-9.43858524500000,-7.47857127600000,-0.815547903000000,-0.187702571000000,-6.27043386000000,-1.05757646100000,-3.98935137100000,-5.31774700600000,-6.58024363200000,-2.82658961200000,-2.88505738500000,0.0450939410000000,3.77045221900000];


figure; set(gcf, 'Color', 'w');
plot( jumpDistancesForPlotting,  allDeltaYawResponsesToBarJumps , 'color',[0.9,0.9,0.9 ] ); hold on

plot( jumpDistancesForPlotting,  mean( allDeltaYawResponsesToBarJumps ), '-k' );

% %STD of trace
deltaYawOfBarJumps_STD =  std( allDeltaYawResponsesToBarJumps);
% top 1STD trace
plot( jumpDistancesForPlotting,  mean( allDeltaYawResponsesToBarJumps )  + deltaYawOfBarJumps_STD, '-c');
% bottom 1STD trace
plot( jumpDistancesForPlotting,  mean( allDeltaYawResponsesToBarJumps )  - deltaYawOfBarJumps_STD, '-c');


xlabel( 'bar jump distance (deg)')
ylabel( '\Delta Yaw of ball (deg)  ');
box off;
niceaxes;

title( 'Fly \Delta Yaw of ball (deg) for distance bar jumped, mean in black, 1SD in cyan, ind fly means in grey');


%% %
barJumpsToPLot = [10    30    50    70    90   110   130   150   170];
% positive yaw values are ball turnign rightward, confirm?

% CI obtains from bootstrap of data set X10000000 for 95% ajusted using bonferroni correction 
ajustTop95 = 0.7223;
ajustBottom95 = -0.9527;

deltaYawTowardBar = [];

for i = 1: length( barJumpsToPLot )
    
    % find index where positive of ths bar positive value was shown
    indexOfPositiveBar = find( barJumpsToPLot(i) == jumpDistancesForPlotting );
    
    % find index where negative of this bar positive value was shown
    indexOfNegativeBar = find( (-1)*barJumpsToPLot(i) == jumpDistancesForPlotting );
    
    currPosReposnes = allDeltaYawResponsesToBarJumps( :,  indexOfPositiveBar);
    % flip the turning sign for neg deg bar presentations
    currNegReponses = (-1)*allDeltaYawResponsesToBarJumps( :,  indexOfNegativeBar);

    % add averaged values back into variable to save
    deltaYawWithBarJump( :, i)  = mean( [currPosReposnes currNegReponses], 2 );
        
end

% this holds the yaw of the ball, flip sign to tranform to intended yaw of fly:
deltaYawOfFlyWithBarJump = (-1)*deltaYawWithBarJump;

figure; set(gcf, 'Color', 'w');


% individual fly traces:
plot( barJumpsToPLot, deltaYawOfFlyWithBarJump, 'color',[0.9,0.9,0.9 ] ); hold on;

plot( barJumpsToPLot, mean( deltaYawOfFlyWithBarJump ), '-k' ); hold on;

% add STD to the plot:
% %STD of trace
deltaYawJumps_STD =  std( deltaYawOfFlyWithBarJump);
% top 1STD trace
plot( barJumpsToPLot,  mean( deltaYawOfFlyWithBarJump )  + deltaYawJumps_STD, '-c');
% bottom 1STD trace
plot( barJumpsToPLot,  mean( deltaYawOfFlyWithBarJump )  - deltaYawJumps_STD, '-c');


% % plot ajusted 95% confidence interval on plot
plot( barJumpsToPLot, ajustTop95*ones( 1, length(barJumpsToPLot) ), '-r' ); hold on;
plot( barJumpsToPLot, ajustBottom95*ones( 1, length(barJumpsToPLot) ), '-r' ); hold on;



xlabel( 'bar jump distance (deg)');
ylabel( ' fly yaw following jumped bar \Delta Yaw (deg)');
niceaxes; box off;
% 
 title( 'Fly \Delta Yaw of ball (deg) by distance of bar jump, mean in black, ajusted 95% CI -red, 1SD cyan');
     %% save current plot
     dir = '/Users/evettita/Dropbox (HMS)/FisherLuWilson ms/figure 1/';
      fileName = [ dir 'yawFollowingJumpedBar vs barJumpDistance_CIandSD.eps' ];
      print( fileName, '-dpdf');

%% Bootstrap analysis of ajusted 95% CI for shuffled data
% plan: 1)Choose with replacement 73 values from the 73X16 matrix of all
% delta Yaw values
% 2) Take a mean of 73 choosen values and store this mean, repeat 100,000
% times
% 3) Find the 95% confidence interval of this group of means
NUMBER_OF_REPEATS_TO_RUN = 10000000;
numberOfCells = 73;

randomizedMean = [];

for i = 1: NUMBER_OF_REPEATS_TO_RUN
    
    randIndex =  randi( numel( deltaYawOfFlyWithBarJump) , 1, numberOfCells );

    randomizedMean(i) = mean( deltaYawOfFlyWithBarJump( randIndex ) );
end

%% Find 95% confidence interval w/ bonferroni correct

[bottom95, top95, ajustBottom95, ajustTop95] = plotPDFandCDF( randomizedMean , length(barJumpsToPLot) );% find 95% CI 

ajustTop95
ajustBottom95


%%
function [ bottomInterval_2SD, topInterval_2SD,  ajustedBottomInterval, ajustedTopInterval] = plotPDFandCDF( data , numMulitpleComps)
% PLOTPDFANDCDF - plots probabily density funciton and cumlative
% distriution function for current data

% make the probability density function curve by building a histgram of the values 
figure; set(gcf, 'Color', 'w');
H = histogram( data, 100, 'Normalization','pdf'); hold on;

pdf = H.Values;

% loop over and build the cdf - cumlative distribution function
cumlativeSum = cumsum( pdf );

% normalize
cdf = cumlativeSum /  max(cumlativeSum);

binMiddles = H.BinEdges(1:end-1) + ( H.BinWidth / 2 );
plot( binMiddles, cdf ); hold on;

% shifted CI for mulitple comparisons 
comparisonNum = numMulitpleComps;

ajustedBottomCutOff = (0.05/ (comparisonNum*2) );
ajustedTopCutOff = 1-(0.05/ (comparisonNum*2) );

ajustedBottomInterval = max( binMiddles( cdf<ajustedBottomCutOff ));
plot([ajustedBottomInterval, ajustedBottomInterval], [0,1]);

ajustedTopInterval = max( binMiddles( cdf<ajustedTopCutOff ));
plot([ajustedTopInterval, ajustedTopInterval], [0,1]);

% 2.5% inverval cut off (95% CI)
bottomInterval_2SD = max( binMiddles( cdf<0.025 ));
plot([bottomInterval_2SD, bottomInterval_2SD], [0,1]);

topInterval_2SD = max( binMiddles( cdf<0.975 ));
plot([topInterval_2SD, topInterval_2SD], [0,1]);

% 16% interval cut off
bottomInterval_1SD = max( binMiddles( cdf<0.16 ));
plot([bottomInterval_1SD, bottomInterval_1SD], [0,1]);

topInterval_1SD = max( binMiddles( cdf<0.84 ));
plot([topInterval_1SD, topInterval_1SD], [0,1]);

niceaxes, box off;
xlabel('x metric');
title(['pdf & cdf  1SD: [' num2str(bottomInterval_1SD) ','  num2str(topInterval_1SD) '] 2SD: ['  num2str(bottomInterval_2SD) ','  num2str(topInterval_2SD) ']']);

end


%%
function [] = plotSelectedTrials( trialFilesList )
% PLOTSELECTEDTRIALS
% helper plotting function for analysis
% Loop over all the files and extract the data for all the trials selected
ephysSettings;

dataWholeExp = struct();

for fileNum = 1 : length ( trialFilesList )
    
    cd( trialFilesList( fileNum ).folder );
    % load current file for current trial
    load( trialFilesList(fileNum).name );
    
    
    if( fileNum == 1) % first trial set up dataWholeExp variable with subfields that match data
        dataWholeExp = data;
    else
        % concatenate all the fields in data.___ into a new large struct will
        % whole data set in it still organized by trial order
        dataWholeExp = [ dataWholeExp , data ];
        
    end
end

% Concatinate variables from whole single experiment
voltage = cat(1, dataWholeExp(:).voltage);
xPanelPos = cat(1, dataWholeExp(:).xPanelPos);
ficTracAngularPosition = cat(1, dataWholeExp(:).ficTracAngularPosition);

% extract and concatinate Integrated X if exists
if(isfield( dataWholeExp ,'ficTracIntx') )
    ficTracIntx = cat(1, dataWholeExp(:).ficTracIntx);
end

% Plot data from whole experiment:
FigHand = figure('Position',[50, 50, 1800, 800]);
set(gcf, 'Color', 'w');

timeArray = (1  :  length(voltage) ) / settings.sampRate; % seconds

ax(1) = subplot(3,1,1);
plot( timeArray,  voltage , 'DisplayName' , 'membrane Voltage' ); hold on;
ax(2) = subplot(3,1,2);
plot( timeArray,  xPanelPos , 'DisplayName' , 'panel position' ); hold on;
ax(3) = subplot(3,1,3);
plot( timeArray, ficTracAngularPosition , 'DisplayName' , ' ball position (Yaw)' ); hold on;

linkaxes(ax,'x');
legend('show')

end
